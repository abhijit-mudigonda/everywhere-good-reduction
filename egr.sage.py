

# This file was *autogenerated* from the file egr.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3)#!/usr/bin/env python3

import argparse
import os
import math
from typing import Any, Dict, List, Tuple
import numpy as np
import matplotlib.pyplot as plt

DATA_DIR="/home/abhijitm/research/nt/matschke_elliptic/s-unit-equations/elliptic-curve-tables/good-reduction-everywhere/"

parser = argparse.ArgumentParser()
parser.add_argument("d", type = int, action = "store", help = "the degree of extension")
args = parser.parse_args()

d = args.d

print([filename for filename in os.listdir(DATA_DIR) if filename.startswith("curves_deg_" + str(d) + "_Dmax") and filename.split('.')[_sage_const_1 ] == "sobj"])    

data_file_name = [filename for filename in os.listdir(DATA_DIR) if filename.startswith("curves_deg_" + str(d) + "_Dmax") and filename.split('.')[_sage_const_1 ] == "sobj"][-_sage_const_1 ]    
X = int(data_file_name.split('.')[_sage_const_0 ].split('_')[_sage_const_4 ][:-_sage_const_1 ])
L = load(DATA_DIR+data_file_name)

#Go through the list, marking a particular discriminant norm when you have a real (resp. imaginary) field of this 
#discriminant. At the end, generate the cumulative sum. 

discs = [[] for i in range(floor(d/_sage_const_2 )+_sage_const_1 )]
P = QQ['x']; (x,) = P._first_ngens(1)
ctr = _sage_const_0 
for i in range(len(L[_sage_const_1 ])):
    ctr += _sage_const_1 
    K = NumberField(P(L[_sage_const_1 ][i][_sage_const_0 ][_sage_const_3 ]), names=('a',)); (a,) = K._first_ngens(1)
    discs[K.signature()[_sage_const_1 ]].append(abs(K.absolute_discriminant()))

sums = []
cumes = np.ndarray(shape=(floor(d/_sage_const_2 )+_sage_const_1 ,X+_sage_const_1 ), dtype = int)
x = list(range(X+_sage_const_1 ))

for i in range(floor(d/_sage_const_2 )+_sage_const_1 ):
    discs[i].sort()
    cume = _sage_const_0 
    idx = _sage_const_0 
    for j in range(X+_sage_const_1 ):
        while idx < len(discs[i]) and discs[i][idx] <= j:
            idx += _sage_const_1 
            cume += _sage_const_1 
        cumes[i,j] = cume
    sums.append(len(discs[i]))

    y = cumes[i,:]
    plt.plot(x,y)



#y = [0,0]+[z/(sqrt(log(z))) for z in x[2:]]
#plt.plot(x,y)

plt.savefig("./myplot.png")
print(sums)

#Want a histogram of sums and also graphs of cumulative things to see bounds


plt.bar(list(range(floor(d/_sage_const_2 )+_sage_const_1 )), sums, tick_label = ["("+str(d-_sage_const_2 *s)+","+str(s)+")" for s in range(_sage_const_0 ,floor(d/_sage_const_2 )+_sage_const_1 )])
plt.savefig("./myhist.png")














    
    

    
    







