

# This file was *autogenerated* from the file egr.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_27 = Integer(27); _sage_const_54 = Integer(54); _sage_const_20 = Integer(20)#!/usr/bin/env python3

import argparse
import os
import math
from typing import Any, Dict, List, Tuple
import numpy as np
import matplotlib.pyplot as plt

DATA_DIR="/home/abhijitm/research/nt/matschke_elliptic/s-unit-equations/elliptic-curve-tables/good-reduction-everywhere/"

parser = argparse.ArgumentParser()
parser.add_argument("d", type = int, action = "store", help = "the degree of extension")
parser.add_argument("--datadir", type = str, action = "store", default = DATA_DIR, help = "where to find the .sobj files") 
args = parser.parse_args()

d = args.d
datadir = args.datadir

print([filename for filename in os.listdir(datadir) if filename.startswith("curves_deg_" + str(d) + "_Dmax") and filename.split('.')[_sage_const_1 ] == "sobj"])    

data_file_name = [filename for filename in os.listdir(datadir) if filename.startswith("curves_deg_" + str(d) + "_Dmax") and filename.split('.')[_sage_const_1 ] == "sobj"][-_sage_const_1 ]    
X = int(data_file_name.split('.')[_sage_const_0 ].split('_')[_sage_const_4 ][:-_sage_const_1 ])
L = load(datadir+data_file_name)

#Go through the list, marking a particular discriminant norm when you have a real (resp. imaginary) field of this 
#discriminant. At the end, generate the cumulative sum. 

discs = [[] for i in range(floor(d/_sage_const_2 )+_sage_const_1 )]


nf_at_sig = [_sage_const_0 ]*(floor(d/_sage_const_2 )+_sage_const_1 )
curves_at_sig = [_sage_const_0 ]*(floor(d/_sage_const_2 )+_sage_const_1 )
j_invariants = [{} for i in range(floor(d/_sage_const_2 )+_sage_const_1 )]

P = QQ['x']; (x,) = P._first_ngens(1)
blah = _sage_const_0 
ctr = _sage_const_0 
for i in range(len(L[_sage_const_1 ])):
    ctr += _sage_const_1 
    K = NumberField(P(L[_sage_const_1 ][i][_sage_const_0 ][_sage_const_3 ]), names=('theta_K',)); (theta_K,) = K._first_ngens(1)
    nf_at_sig[K.signature()[_sage_const_1 ]] += _sage_const_1 

    for j in range(len(L[_sage_const_1 ][i][_sage_const_1 ])):
        E = EllipticCurve([-_sage_const_27 *K(L[_sage_const_1 ][i][_sage_const_1 ][j][_sage_const_0 ]), -_sage_const_54 *K(L[_sage_const_1 ][i][_sage_const_1 ][j][_sage_const_1 ])])
        j_inv = str(E.j_invariant())
        if j_inv in j_invariants[K.signature()[_sage_const_1 ]]:
            j_invariants[K.signature()[_sage_const_1 ]][j_inv] += _sage_const_1 
        else:
            j_invariants[K.signature()[_sage_const_1 ]][j_inv] = _sage_const_1 

        curves_at_sig[K.signature()[_sage_const_1 ]] += _sage_const_1 


plt.bar(list(range(floor(d/_sage_const_2 )+_sage_const_1 )), nf_at_sig, tick_label = ["("+str(d-_sage_const_2 *s)+","+str(s)+")" for s in range(_sage_const_0 ,floor(d/_sage_const_2 )+_sage_const_1 )])
plt.savefig("degree_"+str(d)+"_nf_at_sig.png")
plt.bar(list(range(floor(d/_sage_const_2 )+_sage_const_1 )), curves_at_sig, tick_label = ["("+str(d-_sage_const_2 *s)+","+str(s)+")" for s in range(_sage_const_0 ,floor(d/_sage_const_2 )+_sage_const_1 )])
plt.savefig("degree_"+str(d)+"_curves_at_sig.png")


for j_sig in j_invariants:
    print(sorted([(j, j_sig[j]) for j in j_sig.keys()], key = lambda x: x[_sage_const_1 ], reverse = True)[:_sage_const_20 ])



    
    

    
    







